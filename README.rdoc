= Double Agent

double_agent is a library for parsing browser and operating system info out of user 
agent strings. It is designed for parsing large sets for review or analysis.

*NEW* in 1.0.0: helpers for generating pretty graphs!! See DoubleAgent::Graphs (requires gruff).

*NOTE* Support for Ruby 1.8.x was dropped after version 0.2.3.

== Installation

    gem install double_agent

== Loading

Double Agent is broken up into modules - Parser, Resources, Stats, Logs and Graphs.

    # Load the core modules (Parser, Resources)
    require 'double_agent'

    # Load modules individually
    require 'double_agent/parser|resources|stats|logs|graphs|all'

Read the full documentation at http://jordanhollinger.com/docs/double_agent/

= Parser

    user_agent = DoubleAgent.parse("Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.19 (KHTML, like Gecko) Ubuntu/12.04 Chromium/18.0.1025.168 Chrome/18.0.1025.168 Safari/535.19")

    user_agent.browser
    => "Chrome 18"

    user_agent.browser_family
    => "Chromium"

    user_agent.os
    => "Ubuntu"

    user_agent.os_family
    => "GNU/Linux"

    user_agent.mobile?
    => false

    # Or

    DoubleAgent.browser("Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.19 (KHTML, like Gecko) Ubuntu/12.04 Chromium/18.0.1025.168 Chrome/18.0.1025.168 Safari/535.19")
    => "Chrome 18"

See the DoubleAgent module for more.

= Resources

DoubleAgent::Resource is a mix-in for objects with a user_agent method.
It gives that class's objects all of the above methods and more.

    class Login
      include DoubleAgent::Resource

      def user_agent
        #returns the user agent string the user logged in with
      end
    end

    login = Login.find(76)

    login.browser
    => "Firefox 4"

    login.os_family
    => "OS X"

= Stats

Calculate browser and OS shares for large sets of DoubleAgent::Resource objects with DoubleAgent::Stats.

    require 'tablizer'

    logins = Login.all
    p logins.size
    => 1000

    stats = DoubleAgent::Stats.counts(logins, :browser_family)
    p stats
    => [["Firefox", 600], ["Internet Explorer", 200], ["Safari", 200]]

    stats = DoubleAgent::Stats.percentages(logins, :browser_family, :os_family)
    p stats
    => [["Firefox", "Windows", 50.0, 500], ["Internet Explorer", "Windows", 20.0, 200], ["Safari", "OS X", 20.0, 200], ["Firefox", "GNU/Linux", 10.0, 100]]

    puts Tablizer::Table.new(stats)
    => +-----------------+------------+----+---+
       |Firefox          |Windows     |50.0|500|
       |Internet Explorer|Windows     |20.0|200|
       |Safari           |OS X        |20.0|200|
       |Firefox          |GNU/Linux   |10.0|100|
       +-----------------+------------+----+---+

= Logs

DoubleAgent::Logs::entries parses through Apache and Nginx access logs, instantiating each log line into a DoubleAgent::Logs::Entry
object. It even reads gzipped logs (requires zlib)! Since the DoubleAgent::Logs::Entry class mixes in DoubleAgent::Resource, you
can easily calculate browser and/or OS share on your site.

    entries = DoubleAgent::Logs.entries("/var/log/nginx/my-site.access.log*")
    stats = DoubleAgent::Stats.percentages(entries, :browser)

    p stats
    => [["Firefox 4", 20.0, 650], ["Internet Explorer 8", 18.0, 587], ...]

Check out the DoubleAgent::Logs::Entry class for more methods besides user_agent.

= Graphs

DoubleAgent::Graphs extends DoubleAgent::Stats by adding several helpers for generating graphs. Requires that the Ruby "gruff" gem be installed.

    # Any objects that includes DoubleAgent::Resource can be used instead
    logs = DoubleAgent::Logs.entries("/var/log/nginx/my-site.access.log*")

    # A pie chart of Firefox version shares
    ff = logs.select { |e| e.browser_sym == :firefox }
    DoubleAgent::Stats.percentages(ff, :browser).pie_chart('/path/to/ff-version-share.png', 'Firefox Version Share')

    # A line graph of daily browser family numbers over time, tricked out with lots of options
    # See http://gruff.rubyforge.org/classes/Gruff/Base.html for more Gruff options
    DoubleAgent::Stats.counts(logs, :browser_family).line_graph(:date, '/path/to/browser-share.png') do |chart, labeler|
      chart.title = 'Browser Share'
      chart.font = '/path/to/awesome/font.ttf'
      chart.theme = {
        :colors => %w(orange purple green white red),
        :marker_color => 'blue',
        :background_colors => %w(black grey)
      }

      # Only show every 7th label, and make dates pretty
      labeler.call(7) do |date|
        date.strftime('%b %e')
      end
    end

Look at DoubleAgent::Graphs for more graphs and examples.

== License
Copyright 2011 Jordan Hollinger

Licensed under the Apache License
